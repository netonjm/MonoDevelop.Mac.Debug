// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using AppKit;
using CoreGraphics;
using Foundation;
using ObjCRuntime;
using VisualStudio;
using VisualStudio.ViewInspector;
using VisualStudio.ViewInspector.Abstractions;
using VisualStudio.ViewInspector.Mac.Abstractions;
using VisualStudio.ViewInspector.Mac.Services;
using VisualStudio.ViewInspector.Mac.Windows;

namespace MonoDevelop.Inspector.Mac.HostWindow
{
    [Register("DebugWindow")]
	public class InspectorHostWindow : BaseWindow, IMainWindow, INSTouchBarDelegate
    {
        NSTouchBar touchbar;
        ToolbarService toolbarService;
        InspectorContext inspectorContext;
        MacInspectorDelegate inspectorDelegate;

        public InspectorViewMode ViewMode { get; set; } = InspectorViewMode.Native;

        public InspectorHostWindow(NativeHandle handle) : base(handle)
        {
        }

        public InspectorHostWindow(NSCoder coder) : base(coder)
        {
        }

        public InspectorHostWindow() : base()
        {
            Initialize();
        }

        void Initialize()
		{
            if (inspectorDelegate == null)
            {
                NSApplication.SharedApplication.SetAutomaticCustomizeTouchBarMenuItemEnabled(true);
                touchbar = new NSTouchBar();
                toolbarService = ToolbarService.Current;
                inspectorContext = InspectorContext.Current;

                inspectorDelegate = new MacInspectorDelegate();

                //we need to load assemblies?
                var manager = inspectorDelegate.CreateInspectorManager();
                inspectorContext.Initialize(inspectorDelegate, manager, false);
                inspectorContext.FocusedViewChanged += Context_FocusedViewChanged;
            }
        }

        //refresh bar
        void Context_FocusedViewChanged(object sender, IView e)
        {
            if (e.NativeObject is NSView view)
            {
                RefreshBar(view);
            }
        }

        protected override void Dispose(bool disposing)
        {
            inspectorContext.FocusedViewChanged -= Context_FocusedViewChanged;
            base.Dispose(disposing);
        }

        [Export ("makeTouchBar")]
        public NSTouchBar MakeTouchBar ()
        {
            return touchbar;
        }

        void RefreshBar (NSView view)
        {
            var touchBarDelegate = toolbarService.GetTouchBarDelegate(view);
            if (touchBarDelegate != null)
            {
                touchBarDelegate.SetCurrentView(view);
                touchbar.Delegate = touchBarDelegate;
                touchbar.DefaultItemIdentifiers = touchBarDelegate.Identifiers;
                view.SetTouchBar(touchbar);
            }
        }

        public override void BecomeKeyWindow()
        {
            inspectorContext.Attach(this);
            base.BecomeKeyWindow();
        }

        public override bool MakeFirstResponder (NSResponder aResponder)
		{
			if (aResponder is NSView view) {
                inspectorContext.ChangeFocusedView (new ViewWrapper (view));
                RefreshBar(view);
            }
            return base.MakeFirstResponder (aResponder);
		}
    }
}
