// This file has been autogenerated from a class added in the UI designer.

using System;
using AppKit;
using Foundation;
using System.Linq;
using CoreGraphics;
using System.Timers;
using VisualStudio.ViewInspector.Abstractions;
using VisualStudio.ViewInspector.Mac.Abstractions;

namespace VisualStudio.ViewInspector.Mac.Services
{
    public class WindowWatcher : IWindowWatcher
    {
        Timer m_Timer;
       
        public event EventHandler<IMainWindow> WindowChanged;
        public event EventHandler<INativeObject> ResponderChanged;

        public double Interval { get; set; } = 0.2;

        public Func<IWindow, bool> IsWindowAllowedFunc { get; set; }

        public WindowWatcher()
        {
            m_Timer = new Timer();
            m_Timer.Enabled = true;
            m_Timer.Interval = Interval;
            m_Timer.Elapsed += TickHandleAction;
        }


        NSWindow window;
        public NSWindow CurrentWindow
        {
            get => window;
            private set
            {
                if (window == value || value == null)
                    return;
                window = value;

                WindowChanged?.Invoke(this, new ObservableWindow(window));

                try
                {
                    CurrentResponder = window.NextResponder;
                }
                catch (Exception ex)
                {

                }
            }
        }

        NSResponder responder;
        public NSResponder CurrentResponder
        {
            get => responder;
            private set
            {
                if (responder == value)
                    return;
                responder = value;

                if (responder == null)
                    ResponderChanged?.Invoke(this, null);
                else
                    ResponderChanged?.Invoke(this, new ResponderWrapper(responder));
            }
        }

        public bool Started { get; private set; }

        NSResponder GetRealResponder (NSResponder responder)
        {
            if (responder is NSView view)
            {
                if (view is NSTextView textView && textView.Superview is NSClipView clipView && clipView.Superview is NSTextField textField)
                {
                    return textField;
                }
            }
            return responder;
        } 

        void TickHandleAction(object sender, ElapsedEventArgs e)
        {
            AppKit.NSApplication.SharedApplication.InvokeOnMainThread(() =>
            {
                var focusedWindow = NSApplication.SharedApplication.ModalWindow ?? NSApplication.SharedApplication.KeyWindow;

                if (!IsWindowAllowedFunc?.Invoke(new WindowWrapper(focusedWindow)) ?? true)
                {
                    return;
                }

                if (focusedWindow != null && this.window != focusedWindow)
                {
                    CurrentWindow = focusedWindow;
                }

                if (window == null)
                {
                    CurrentResponder = null;
                    return;
                }
                   

                var currentResponder = GetRealResponder(window.FirstResponder);
                CurrentResponder = currentResponder;
            });
        }

        public void Start()
        {
            Stop();
            Started = true;
            m_Timer.Start();
        }

        public void Stop()
        {
            Started = false;
            m_Timer.Stop();
        }

        public void Dispose()
        {
            Stop();
        }
    }
}
