// This file has been autogenerated from a class added in the UI designer.

using System;
using AppKit;
using System.Text;
using Foundation;
using System.Linq;
using Xamarin.PropertyEditing.Drawing;
using System.Collections.Generic;

namespace VisualStudio.ViewInspector.Mac.Windows.Inspector
{
	class PropertyPanelNSTableView : PropertyPanelNSControl
	{
		NSTableView tableView => (NSTableView)view;

		public int SelectedRow
		{
			get => (int)tableView.SelectedRow;
			set => tableView.SelectRow(value, false);
		}

		public NSTableViewStyle Style
		{
			get => tableView.Style;
			set => tableView.Style = value;
		}

		public NSTableViewColumnAutoresizingStyle ColumnAutoresizingStyle
		{
			get => tableView.ColumnAutoresizingStyle;
			set => tableView.ColumnAutoresizingStyle = value;
		}

		public NSTableViewGridStyle GridStyleMask
		{
			get => tableView.GridStyleMask;
			set => tableView.GridStyleMask = value;
		}

		public float RowHeight
		{
			get => (float)tableView.RowHeight;
			set => tableView.RowHeight = value;
		}

		public int ColumnCount => (int)tableView.ColumnCount;

		public NSTableViewRowSizeStyle EffectiveRowSizeStyle
		{
			get => tableView.EffectiveRowSizeStyle;
		}

		public NSTableViewStyle EffectiveStyle
		{
			get => tableView.EffectiveStyle;
		}

		public NSTableViewSelectionHighlightStyle SelectionHighlightStyle
		{
			get => tableView.SelectionHighlightStyle;
			set => tableView.SelectionHighlightStyle = value;
		}

		public List<int> SelectedRows
		{
			get => tableView.SelectedRows.Select(s => (int)s).ToList();
			set {
				var array = value.Select(s => (nuint)s).ToArray();
				tableView.SelectRows(NSIndexSet.FromArray(array), false);
			}
		}

		public PropertyPanelNSTableView(NSTableView view) : base(view)
		{

		}
	}

    class PropertyPanelNSScrollView : PropertyPanelNSView
	{
		public bool HasHorizontalRuler
		{
			get => scrollView.HasHorizontalRuler;
			set => scrollView.HasHorizontalRuler = value;
		}

		public bool HasVerticalRuler
		{
			get => scrollView.HasVerticalRuler;
			set => scrollView.HasVerticalRuler = value;
		}

		public bool HasVerticalScroller
		{
			get => scrollView.HasVerticalScroller;
			set => scrollView.HasVerticalScroller = value;
		}

		public bool HasHorizontalScroller
		{
			get => scrollView.HasHorizontalScroller;
			set => scrollView.HasHorizontalScroller = value;
		}

		public float HorizontalLineScroll
		{
			get => (float) scrollView.HorizontalLineScroll;
			set => scrollView.HorizontalLineScroll = value;
		}

		public float VerticalLineScroll
		{
			get => (float)scrollView.VerticalLineScroll;
			set => scrollView.VerticalLineScroll = value;
		}

		public bool VerticalContentSizeConstraintActive
		{
			get => scrollView.VerticalContentSizeConstraintActive;
			set => scrollView.VerticalContentSizeConstraintActive = value;
		}

		public NSUserInterfaceLayoutDirection UserInterfaceLayoutDirection
		{
			get => scrollView.UserInterfaceLayoutDirection;
			set => scrollView.UserInterfaceLayoutDirection = value;
		}

		public bool UsesPredominantAxisScrolling
		{
			get => scrollView.UsesPredominantAxisScrolling;
			set => scrollView.UsesPredominantAxisScrolling = value;
		}

		public bool ScrollsDynamically
		{
			get => scrollView.ScrollsDynamically;
			set => scrollView.ScrollsDynamically = value;
		}

		public CommonRectangle AlignmentRectInsets
		{
			get => scrollView.AlignmentRectInsets.ToCommonRectangle();
		}

		public bool AllowsMagnification
		{
			get => scrollView.AllowsMagnification;
			set => scrollView.AllowsMagnification = value;
		}

		public bool AutohidesScrollers
		{
			get => scrollView.AutohidesScrollers;
			set => scrollView.AutohidesScrollers = value;
		}

		public bool AutomaticallyAdjustsContentInsets
		{
			get => scrollView.AutomaticallyAdjustsContentInsets;
			set => scrollView.AutomaticallyAdjustsContentInsets = value;
		}

		public NSBorderType BorderType
		{
			get => scrollView.BorderType;
			set => scrollView.BorderType = value;
		}

		public CommonRectangle ContentInsets
		{
			get => scrollView.ContentInsets.ToCommonRectangle();
			set => scrollView.ContentInsets = value.ToEdgeInserts();
		}

		public CommonSize ContentSize
		{
			get => scrollView.ContentSize.ToCommonSize();
		}

		public float LineScroll
		{
			get => (float)scrollView.LineScroll;
			set => scrollView.LineScroll = value;
		}

		public float Magnification
		{
			get => (float)scrollView.Magnification;
			set => scrollView.Magnification = value;
		}

		public float MaxMagnification
		{
			get => (float)scrollView.MaxMagnification;
			set => scrollView.MaxMagnification = value;
		}

		public float MinMagnification
		{
			get => (float) scrollView.MinMagnification;
			set => scrollView.MinMagnification = value;
		}

		public CommonRectangle ScrollerInsets
		{
			get => scrollView.ScrollerInsets.ToCommonRectangle();
			set => scrollView.ScrollerInsets = value.ToEdgeInserts();
		}

		public NSScrollerKnobStyle ScrollerKnobStyle
		{
			get => scrollView.ScrollerKnobStyle;
			set => scrollView.ScrollerKnobStyle = value;
		}

		public NSScrollerStyle ScrollerStyle
		{
			get => scrollView.ScrollerStyle;
			set => scrollView.ScrollerStyle = value;
		}

		public bool ShouldDrawColor
		{
			get => scrollView.ShouldDrawColor;
		}

		public bool DrawsBackground
		{
			get => scrollView.DrawsBackground;
			set => scrollView.DrawsBackground = value;
		}

		public NSScrollElasticity VerticalScrollElasticity
		{
			get => scrollView.VerticalScrollElasticity;
			set => scrollView.VerticalScrollElasticity = value;
		}

		NSScrollView scrollView;
		public PropertyPanelNSScrollView(NSScrollView scrollView) : base (scrollView)
        {
			this.scrollView = scrollView;
		}
	}

	class PropertyPanelNSOutlineView : PropertyPanelNSControl
	{
		NSOutlineView tableView => (NSOutlineView)view;

		public int SelectedRow
		{
			get => (int)tableView.SelectedRow;
			set => tableView.SelectRow(value, false);
		}

		public PropertyPanelNSOutlineView(NSOutlineView view) : base(view)
		{

		}
	}

	class PropertyPanelNSComboBox : PropertyPanelNSControl
	{
		NSComboBox combo => (NSComboBox)view;

		public bool ButtonBordered
		{
			get => combo.ButtonBordered;
			set => combo.ButtonBordered = value;
		}

		bool IsValidIndex(int index) => index == -1 || (index > 0 && index < combo.Count); 

		public int SelectedIndex
		{
			get => (int)combo.SelectedIndex;
			set
			{
				if (IsValidIndex(value))
					combo.SelectItem(value);
			}
		}

		public string SelectedItem
		{
			get => IsValidIndex(SelectedIndex) ? combo.Values[SelectedIndex].ToString() : "(none)";
		}

		public System.Collections.IList Items
		{
			get
			{
				var values = combo.Values;
				return values.Select(s => s.ToString()).ToList();
			}
			set
			{
				combo.RemoveAll();
                foreach (var item in value)
                {
					combo.Add((NSString)item);
				}
			}
		}

		public PropertyPanelNSComboBox(NSComboBox view) : base(view)
		{
			
		}
	}

	class PropertyPanelNSPopupButton : PropertyPanelNSControl
	{
		NSPopUpButton combo => (NSPopUpButton)view;

		bool IsValidIndex(int index) => index == -1 || (index > 0 && index < combo.ItemCount);

		public int SelectedIndex
		{
			get => (int)combo.IndexOfSelectedItem;
			set
			{
				if (IsValidIndex(value))
					combo.SelectItem(value);
			}
		}

		public string SelectedItem
		{
			get => combo.ItemAtIndex(SelectedIndex)?.Title ?? "(none)";
		}

		public System.Collections.IList Items
		{
			get
			{
				var values = combo.Items();
				return values.Select(s => s.Title).ToList();
			}
			set
			{
				combo.RemoveAllItems();
				foreach (var item in value)
				{
					combo.AddItem(item as string);
				}
			}
		}

		public PropertyPanelNSPopupButton(NSPopUpButton view) : base(view)
		{
			
		}
	}

	class PropertyPanelNSTextView : PropertyPanelNSView
	{
		NSTextView textView => (NSTextView)view;

		public PropertyPanelNSTextView(NSTextView view) : base(view)
		{
			
		}

		public string Value
		{
			get => textView.Value;
			set => textView.Value = value;
		}
		public NSFont Font
		{
			get => textView.Font;
			set => textView.Font = value;
		}

		public CommonColor TextColor
		{
			get => textView.TextColor.ToCommonColor();
			set => textView.TextColor = value.ToNSColor();
		}
		public CommonColor BackgroundColor
		{
			get => textView.BackgroundColor.ToCommonColor();
			set => textView.BackgroundColor = value.ToNSColor();
		}

		//public NSAttributedString AttributedStringValue
		//{
		//	get => textView.AttributedString;
		//}
	}

    class PropertyPanelNSTextField : PropertyPanelNSControl
	{
		NSTextField textView => (NSTextField)view;

		public PropertyPanelNSTextField (NSTextField view) : base(view)
		{
			
		}

		public string StringValue
		{
			get => textView.StringValue;
			set => textView.StringValue = value;
		}

		public string PlaceholderString
		{
			get => textView.PlaceholderString;
			set => textView.PlaceholderString = value;
		}

		public NSLineBreakMode LineBreakMode
		{
			get => textView.LineBreakMode;
			set => textView.LineBreakMode = value;
		}

		public NSLineBreakStrategy LineBreakStrategy
		{
			get => textView.LineBreakStrategy;
			set => textView.LineBreakStrategy = value;
		}

		public string ToolTip
		{
			get => textView.ToolTip;
			set => textView.ToolTip = value;
		}

		public bool DrawsBackground
		{
			get => textView.DrawsBackground;
			set => textView.DrawsBackground = value;
		}

		public bool Editable
		{
			get => textView.Editable;
			set => textView.Editable = value;
		}

		public bool Bordered
		{
			get => textView.Bordered;
			set => textView.Bordered = value;
		}

		public NSTextAlignment Alignment
		{
			get => textView.Alignment;
			set => textView.Alignment = value;
		}

		public NSFont Font
		{
			get => textView.Font;
			set => textView.Font = value;
		}

		//public CommonColor TextColor
		//{
		//	get => textView.TextColor.ToCommonColor();
		//	set => textView.TextColor = value.ToNSColor();
		//}

		//public CommonColor BackgroundColor
		//{
		//	get => textView.BackgroundColor.ToCommonColor();
		//	set => textView.BackgroundColor = value.ToNSColor();
		//}

		//public NSAttributedString AttributedStringValue
		//{
		//	get => textView.AttributedStringValue;
		//	set => textView.AttributedStringValue = value;
		//}
	}

	class PropertyPanelNSButton : PropertyPanelNSControl
	{
		NSButton buttonView => (NSButton)view;

		#region Image

		public CommonImageBrush Image
		{
			get => buttonView.Image.ToCommonImageBrush();
			set => buttonView.Image = value.ToNSImage();
		}

		public CommonImageBrush AlternateImage
		{
			get => buttonView.AlternateImage.ToCommonImageBrush();
			set => buttonView.AlternateImage = value.ToNSImage();
		}

		#endregion

		#region Text

		public string Title
		{
			get => buttonView.Title;
			set => buttonView.Title = value;
		}

		public NSFont Font
		{
			get => buttonView.Font;
			set => buttonView.Font = value;
		}

		public string AlternateTitle
		{
			get => buttonView.AlternateTitle;
			set => buttonView.AlternateTitle = value;
		}

		public NSTextAlignment Alignment
		{
			get => buttonView.Alignment;
			set => buttonView.Alignment = value;
		}

		#endregion

		public bool Bordered
		{
			get => buttonView.Bordered;
			set => buttonView.Bordered = value;
		}

		NSButtonType buttonType;
		public NSButtonType ButtonType
		{
			get => buttonType;
			set
			{
				buttonType = value;
				buttonView.SetButtonType(buttonType);
			}
		}

		public PropertyPanelNSButton(NSButton view) : base(view)
		{

		}

		public bool IsSpringLoaded
		{
			get => buttonView.IsSpringLoaded;
			set => buttonView.IsSpringLoaded = value;
		}

		public bool AllowsMixedState
		{
			get => buttonView.AllowsMixedState;
			set => buttonView.AllowsMixedState = value;
		}

		public NSCellStateValue State
		{
			get => buttonView.State;
			set => buttonView.State = value;
		}

		public NSBezelStyle BezelStyle
		{
			get => buttonView.BezelStyle;
			set => buttonView.BezelStyle = value;
		}
	}

	class PropertyPanelNSBox : PropertyPanelNSView
	{
		readonly NSBox buttonView;

		public PropertyPanelNSBox(NSBox view) : base(view)
		{
			buttonView = view;
		}

		public NSBoxType BoxType
		{
			get => buttonView.BoxType;
			set => buttonView.BoxType = value;
		}

		public NSBorderType BorderType
		{
			get => buttonView.BorderType;
			set => buttonView.BorderType = value;
		}
		public float BoundsRotation
		{
			get => (float)buttonView.BoundsRotation;
			set => buttonView.BoundsRotation = value;
		}
		//public CommonColor BorderColor
		//{
		//	get => buttonView.BorderColor.ToCommonColor();
		//	set => buttonView.BorderColor = value.ToNSColor();
		//}

		//public CommonRectangle BorderRect
		//{
		//	get => buttonView.BorderRect.ToCommonRectangle();
		//}
	}

	class PropertyPanelNSStackView : PropertyPanelNSView
	{
		NSStackView stackView => (NSStackView)view;

		public float Spacing
		{
			get => (float) stackView.Spacing;
			set => stackView.Spacing = value;
		}

		public NSUserInterfaceLayoutOrientation Orientation
		{
			get => stackView.Orientation;
			set => stackView.Orientation = value;
		}

		public NSLayoutAttribute Alignment
		{
			get => stackView.Alignment;
			set => stackView.Alignment = value;
		}

		public NSStackViewDistribution Distribution
		{
			get => stackView.Distribution;
			set => stackView.Distribution = value;
		}

		public CommonRectangle EdgeInsets
		{
			get => stackView.EdgeInsets.ToCommonRectangle();
			set
			{
				stackView.EdgeInsets = value.ToEdgeInserts();
			}
		}

		public PropertyPanelNSStackView(NSStackView view) : base(view)
		{
			
		}
	}

	class PropertyPanelNSImageView : PropertyPanelNSView
	{
		readonly NSImageView buttonView;

		public NSImage Image
		{
			get => buttonView.Image;
			set => buttonView.Image = value;
		}

		public PropertyPanelNSImageView(NSImageView view) : base(view)
		{
			buttonView = view;
		}

		public NSImageScale ImageScaling
		{
			get => buttonView.ImageScaling;
			set => buttonView.ImageScaling = value;
		}

		public NSImageAlignment ImageAlignment
		{
			get => buttonView.ImageAlignment;
			set => buttonView.ImageAlignment = value;
		}
	}

	class PropertyPanelNSWindow : PropertyPanelNSResponder
	{
		NSWindow window => (NSWindow)responder;

		public string Title
		{
			get => window.Title;
			set => window.Title = value;
		}

		public NSWindowStyle StyleMask
		{
			get => window.StyleMask;
			set => window.StyleMask = value;
		}

		public string Subtitle
		{
			get => window.Subtitle;
			set => window.Subtitle = value;
		}

		public NSWindowTabbingMode TabbingMode
		{
			get => window.TabbingMode;
			set => window.TabbingMode = value;
		}

		public NSWindowToolbarStyle ToolbarStyle
		{
			get => window.ToolbarStyle;
			set => window.ToolbarStyle = value;
		}

		public NSWindowTabGroup? TabGroup
		{
			get => window.TabGroup;
		}

		public CommonSize ContentMaxSize
		{
			get => window.ContentMaxSize.ToCommonSize();
			set => window.ContentMaxSize = value.ToCGSize();
		}

		public CommonSize ContentMinSize
		{
			get => window.ContentMinSize.ToCommonSize();
			set => window.ContentMinSize = value.ToCGSize();
		}

		public CommonSize ContentSize
		{
			get => (window.ContentView?.Frame.Size ?? window.Frame.Size).ToCommonSize();
			set => window.SetContentSize(value.ToCGSize());
		}

		public CommonRectangle Frame
		{
			get => window.Frame.ToCommonRectangle();
			set => window.SetFrame(value.ToCGRect(), true);
		}

		public PropertyPanelNSWindow(NSWindow window) : base(window)
		{
			
		}
	}

	class PropertyPanelNSControl : PropertyPanelNSView
	{
		protected NSControl control => (NSControl)view;

		public NSControlSize ControlSize
		{
			get => control.ControlSize;
			set => control.ControlSize = value;
		}

		public bool Enabled
		{
			get => control.Enabled;
			set => control.Enabled = value;
		}

		public PropertyPanelNSControl(NSControl control) : base(control)
        {
			
		}
	}

	class PropertyPanelNSLayoutConstraint : PropertyPanelNSResponder
	{
		NSLayoutConstraint layoutConstraint => (NSLayoutConstraint)base.responder;

		public float Constant
		{
			get => (float)layoutConstraint.Constant;
			set => layoutConstraint.Constant = value;
		}

		public float Priority
		{
			get => (float)layoutConstraint.Priority;
			set => layoutConstraint.Priority = value;
		}

		public NSLayoutRelation Relation
		{
			get => layoutConstraint.Relation;
		}

		public bool Active
		{
			get => layoutConstraint.Active;
		}

		public object FirstItem
		{
			get => layoutConstraint.FirstItem;
		}

		public NSLayoutAttribute FirstItemAttribute
		{
			get => layoutConstraint.FirstAttribute;
		}

		public object SecondItem
		{
			get => layoutConstraint.SecondItem;
		}

		public NSLayoutAttribute SecondItemAttribute
		{
			get => layoutConstraint.SecondAttribute;
		}

		public PropertyPanelNSLayoutConstraint(NSLayoutConstraint constraint) : base(constraint)
		{
			
		}
	}

	class PropertyPanelNSResponder
    {
		protected readonly NSObject responder;

		public PropertyPanelNSResponder(NSObject responder)
        {
			this.responder = responder;
		}
	}

	class PropertyPanelNSView : PropertyPanelNSResponder
	{
		protected NSView view => (NSView) responder;

		public bool NeedsLayout
		{
			get => view.NeedsLayout;
			set => view.NeedsLayout = value;
		}

		public bool NeedsDisplay
		{
			get => view.NeedsDisplay;
			set => view.NeedsDisplay = value;
		}

		public bool AcceptsTouchEvents
		{
			get => view.AcceptsTouchEvents;
			set => view.AcceptsTouchEvents = value;
		}

		public bool IsFlipped
		{
			get => view.IsFlipped;
		}

		public bool HasAmbiguousLayout
		{
			get => view.HasAmbiguousLayout;
		}

		public float AlphaValue
		{
			get => (float)view.AlphaValue;
			set => view.AlphaValue = value;
		}

		public CommonSize FittingSize
		{
			get => view.FittingSize.ToCommonSize();
		}

		public string Identifier
		{
			get => view.Identifier;
			set => view.Identifier = value;
		}

		public PropertyPanelNSView(NSView view) : base(view)
		{

		}

		public string AccessibilityTitle {
			get => view.AccessibilityTitle;
			set => view.AccessibilityTitle = value;
		}

		public string AccessibilityHelp {
			get => view.AccessibilityHelp;
			set => view.AccessibilityHelp = value;
		}

		public bool AccessibilityElement {
			get => view.AccessibilityElement;
			set => view.AccessibilityElement = value;
		}

		public bool TranslatesAutoresizingMaskIntoConstraints
		{
			get => view.TranslatesAutoresizingMaskIntoConstraints;
			set => view.TranslatesAutoresizingMaskIntoConstraints = value;
		}

		public string ToolTip
		{
			get => view.ToolTip;
			set => view.ToolTip = value;
		}

		public CommonRectangle AccessibilityFrame {
			get => view.AccessibilityFrame.ToCommonRectangle();
			set => view.AccessibilityFrame = value.ToCGRect();
		}

		public string AccessibilityChildren
		{
			get => GetChildren();
		}

		string GetChildren ()
		{
			if (view.AccessibilityChildren == null || view.AccessibilityChildren.Length == 0 || view.AccessibilityChildren.Length > 10)
			{
				return $"Count {view.AccessibilityChildren.Length}";
			}

			var builder = new StringBuilder();
			builder.Append("Count " + view.AccessibilityChildren.Length + " : ");

			for (int i = 0; i < view.AccessibilityChildren.Length; i++)
			{
				if (i > 0)
				{
					builder.Append(", ");
				}
				var type = view.AccessibilityChildren[i].GetType().ToString ();
				builder.Append($"{type}");
			}
			return builder.ToString();
		}

		public object NextKeyView
		{
			get => view.NextKeyView;
		}

		public object NextValidKeyView
		{
			get => view.NextValidKeyView;
		}

		public object PreviousKeyView
		{
			get => view.PreviousKeyView;
		}

		public object PreviousValidKeyView
		{
			get => view.PreviousValidKeyView;
		}

		public NSFocusRingType FocusRingType
		{
			get => view.FocusRingType;
			set => view.FocusRingType = value;
		}

		public int Tag
		{
			get => (int) view.Tag;
		}

		public bool Hidden
		{
			get => view.Hidden;
			set => view.Hidden = value;
		}

		public bool WantsLayer
		{
			get => view.WantsLayer;
			set => view.WantsLayer = value;
		}

		public CommonRectangle VisibleRect {
			get => view.VisibleRect ().ToCommonRectangle();
		}

		public CommonRectangle Frame {
			get => view.Frame.ToCommonRectangle();
			set {
				view.Frame = value.ToCGRect();
			}
		}

		public Type ViewType {
			get => view.GetType ();
		}
	}
}
