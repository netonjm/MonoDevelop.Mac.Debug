// This file has been autogenerated from a class added in the UI designer.

using System;
using AppKit;
using System.Linq;
using Foundation;
using CoreGraphics;
using System.Globalization;
using System.Threading;
using VisualStudio.ViewInspector.Abstractions;
using VisualStudio.ViewInspector.Mac.Views;
using VisualStudio.ViewInspector.Mac.Windows.Inspector;

namespace VisualStudio.ViewInspector.Mac.Windows.Toolbar
{
	class ToolbarImageButton : ImageButton
	{
		public override CGSize IntrinsicContentSize => new CGSize(InspectorToolContentViewController.ButtonWidth, base.IntrinsicContentSize.Height);
	}

	class ToolbarToogleButton : ToggleButton
	{
		public override CGSize IntrinsicContentSize => new CGSize(InspectorToolContentViewController.ButtonWidth, base.IntrinsicContentSize.Height);
	}

	class ToolbarWindow : BaseWindow, IToolbarWindow
	{
		const string ColorSelectorName = "colorDidChange:";
		const string ColorPopoverDidCloseSelectorName = "popoverDidClose:";

		public event EventHandler<bool> KeyViewLoop;
		public event EventHandler<bool> NextKeyViewLoop;
		public event EventHandler<bool> PreviousKeyViewLoop;
		public event EventHandler<bool> ThemeChanged;

		public event EventHandler RefreshTreeViewRequested;

		public event EventHandler ItemDeleted;
		public event EventHandler ItemImageChanged;

		public event EventHandler<IColor> ViewBackgroundColorChanged;

		public event EventHandler<FontData> FontChanged;
        public event EventHandler<CultureInfo> CultureChanged;

        public event EventHandler<InspectorViewMode> InspectorViewModeChanged;

		public event EventHandler ShowInspectorButtonPressed;
		public event EventHandler ShowAccessibilityPressed;

		const int MenuItemSeparation = 3;
		const int LeftPadding = 5;
		const int Margin = 5;

		bool handleChange;
		bool fontButtonsVisible;
		bool imageButtonVisible;
		bool backgroundColorVisible;

		bool removeButtonVisible;

        IInspectDelegate inspectDelegate;

		NSString[] fonts;
		CultureInfo[] cultureInfos;

		NSStackView main;
		NSStackView firstRowStackView;
		NSStackView secondRowStackView;

		NSView rescanSeparator;
		NSComboBox fontsCombobox, languagesComboBox;
		NSTextField fontSizeTextView;
		NSColorWell selectedColorButton, backgroundColorButton;

		VerticalSeparator backgrounColorSectionSeparator;

		ImageButton deleteButton, changeImageButton, refreshButton;
		ToggleButton toolkitButton, showInspectorButton, showAccessibilityButton;

		public ToolbarWindow(IInspectDelegate inspectDelegate, CGRect frame) : base(frame, NSWindowStyle.Titled | NSWindowStyle.FullSizeContentView, NSBackingStore.Buffered, false)
		{
			this.inspectDelegate = inspectDelegate;

			//BackgroundColor = NSColor.Clear;
			IsOpaque = false;
			TitlebarAppearsTransparent = true;
			TitleVisibility = NSWindowTitleVisibility.Hidden;
			ShowsToolbarButton = false;
			MovableByWindowBackground = false;

			main = NativeViewHelper.CreateVerticalStackView(MenuItemSeparation);
			ContentView = main;

			main.EdgeInsets = new NSEdgeInsets(Margin, 0, Margin, 0);

			firstRowStackView = CreateFirstRow();
			main.AddArrangedSubview(firstRowStackView);
			firstRowStackView.EdgeInsets = new NSEdgeInsets(0, Margin, 0, Margin);


			secondRowStackView = CreateSecondRow(); ;
			main.AddArrangedSubview(secondRowStackView);
			secondRowStackView.EdgeInsets = new NSEdgeInsets(0, Margin, 0, Margin);

			main.AddArrangedSubview(new NSView() { TranslatesAutoresizingMaskIntoConstraints = false });

			RegenerateButtons();
		}

		NSStackView CreateFirstRow()
        {
			var stack = NativeViewHelper.CreateHorizontalStackView(MenuItemSeparation);
			var keyViewLoopButton = NativeViewHelper.CreateToolbarToogleButton(inspectDelegate, "overlay-actual@2x.png", "Shows current focused item");
			keyViewLoopButton.IsToggled = true;

			stack.AddArrangedSubview(keyViewLoopButton);
			keyViewLoopButton.Activated += (s, e) => {
				KeyViewLoop?.Invoke(this, keyViewLoopButton.IsToggled);
			};

			var prevKeyViewLoopButton = NativeViewHelper.CreateToolbarToogleButton(inspectDelegate, "overlay-previous@2x.png", "Shows previous focused item");
			stack.AddArrangedSubview(prevKeyViewLoopButton);
			prevKeyViewLoopButton.Activated += (s, e) => {
				PreviousKeyViewLoop?.Invoke(this, prevKeyViewLoopButton.IsToggled);
			};

			var nextKeyViewLoopButton = NativeViewHelper.CreateToolbarToogleButton(inspectDelegate, "overlay-next@2x.png", "Shows next focused item");
			stack.AddArrangedSubview(nextKeyViewLoopButton);
			nextKeyViewLoopButton.Activated += (s, e) => {
				NextKeyViewLoop?.Invoke(this, nextKeyViewLoopButton.IsToggled);
			};

			stack.AddVerticalSeparator();

			//widnows ===========================================================================================
			showAccessibilityButton = NativeViewHelper.CreateToolbarToogleButton(inspectDelegate, "window-accessibility.png", "Show/Hide Accessibility Window");
			stack.AddArrangedSubview(showAccessibilityButton);
			showAccessibilityButton.Activated += (s, e) => ShowAccessibilityPressed?.Invoke(this, EventArgs.Empty);

			showInspectorButton = NativeViewHelper.CreateToolbarToogleButton(inspectDelegate, "window-properties.png", "Show/Hide Inspector Window");
			stack.AddArrangedSubview(showInspectorButton);

			showInspectorButton.IsToggled = true;

			showInspectorButton.Activated += (s,e) => ShowInspectorButtonPressed?.Invoke(this, EventArgs.Empty);

			//======================================================================================================

			stack.AddVerticalSeparator();

			refreshButton = NativeViewHelper.CreateToolbarImageButton(inspectDelegate, "rescan-16.png", "Refresh View Tree");
			stack.AddArrangedSubview(refreshButton);
            refreshButton.Activated += RefreshButton_Activated;

			stack.AddVerticalSeparator();

			toolkitButton = NativeViewHelper.CreateToolbarToogleButton(inspectDelegate, "rescan-16.png", "Change beetween Toolkits");
			stack.AddArrangedSubview(toolkitButton);
			toolkitButton.Activated += ToolkitButton_Activated; ;

			rescanSeparator = stack.AddVerticalSeparator();

			var themeButton = NativeViewHelper.CreateToolbarToogleButton(inspectDelegate, "style-16.png", "Change Style Theme");
			stack.AddArrangedSubview(themeButton);
			themeButton.Activated += ThemeButton_Activated;

			stack.AddVerticalSeparator();

			deleteButton = NativeViewHelper.CreateToolbarImageButton(inspectDelegate, "delete-16.png", "Delete selected item");
			deleteButton.Activated += (s, e) =>
			{
				ItemDeleted?.Invoke(this, EventArgs.Empty);
			};

			changeImageButton = NativeViewHelper.CreateToolbarImageButton(inspectDelegate, "image-16.png", "Change image from selected item");
			changeImageButton.Activated += (s, e) =>
			{
				ItemImageChanged?.Invoke(this, EventArgs.Empty);
			};

			backgroundColorButton = new ColorWell() { ToolTip = "Change background color from layer", TranslatesAutoresizingMaskIntoConstraints = false };
			backgroundColorButton.Activated += ColorButton_Activated;

			backgrounColorSectionSeparator = stack.AddVerticalSeparator();

			//Visual issues view
			languagesComboBox = new NSComboBox() { TranslatesAutoresizingMaskIntoConstraints = false };
			languagesComboBox.ToolTip = "Change font from selected item";
			languagesComboBox.WidthAnchor.ConstraintEqualTo(200).Active = true;

			cultureInfos = CultureInfo.GetCultures(CultureTypes.AllCultures);
			var culturesStr = new NSString[cultureInfos.Length];

			NSString selected = null;
			for (int i = 0; i < cultureInfos.Length; i++)
			{
				culturesStr[i] = new NSString(cultureInfos[i].DisplayName);
				if (i == 0 || cultureInfos[i] == Thread.CurrentThread.CurrentUICulture)
				{
					selected = culturesStr[i];
				}
			}

			languagesComboBox.Add(culturesStr);
			languagesComboBox.Select(selected);

			languagesComboBox.Activated += LanguagesComboBox_SelectionChanged;
			languagesComboBox.SelectionChanged += LanguagesComboBox_SelectionChanged;
			//languagesComboBox.WidthAnchor.ConstraintEqualTo(220).Active = true;

			return stack;
		}

        NSStackView CreateSecondRow()
		{
			var stackView = NativeViewHelper.CreateHorizontalStackView(MenuItemSeparation);
			//FONTS 

			fontsCombobox = new NSComboBox() { TranslatesAutoresizingMaskIntoConstraints = false };
			fontsCombobox.ToolTip = "Change font from selected item";
			fonts = NSFontManager.SharedFontManager.AvailableFonts
				.Select(s => new NSString(s))
				.ToArray();

			fontsCombobox.Add(fonts);
			fontsCombobox.WidthAnchor.ConstraintGreaterThanOrEqualTo(220).Active = true;

			fontSizeTextView = new NSTextField() { TranslatesAutoresizingMaskIntoConstraints = false };
			fontSizeTextView.ToolTip = "Change font size from selected item";
			fontSizeTextView.WidthAnchor.ConstraintEqualTo(40).Active = true;

			fontsCombobox.SelectionChanged += (s, e) => {
				OnFontChanged();
			};

			fontSizeTextView.Activated += (s, e) => {
				OnFontChanged();
			};
			return stackView;
		}

		void RegenerateButtons()
		{
			//first bar
			toolkitButton.RemoveFromSuperview();
			rescanSeparator.RemoveFromSuperview();

			changeImageButton.RemoveFromSuperview();

			languagesComboBox.RemoveFromSuperview();

			backgroundColorButton.RemoveFromSuperview();
			backgrounColorSectionSeparator.RemoveFromSuperview();

			deleteButton.RemoveFromSuperview();

			//if (ShowToolKitButton)
			//{
			//	firstRowStackView.AddArrangedSubview(toolkitButton);
			//	firstRowStackView.AddArrangedSubview(rescanSeparator);
			//}

			if (imageButtonVisible)
				firstRowStackView.AddArrangedSubview(changeImageButton);

			if (removeButtonVisible)
				firstRowStackView.AddArrangedSubview(deleteButton);

			if (backgroundColorVisible)
			{
				firstRowStackView.AddArrangedSubview(backgroundColorButton);
				firstRowStackView.AddArrangedSubview(backgrounColorSectionSeparator);
			}

			firstRowStackView.AddArrangedSubview(languagesComboBox);


			//second row
			fontSizeTextView.RemoveFromSuperview();
			fontsCombobox.RemoveFromSuperview();


			if (fontButtonsVisible)
			{
				secondRowStackView.AddArrangedSubview(fontsCombobox);
				secondRowStackView.AddArrangedSubview(fontSizeTextView);
			}
		}

		void RefreshButton_Activated(object sender, EventArgs e) => RefreshTreeViewRequested?.Invoke(this, EventArgs.Empty);

		int GetSelectedLanguage ()
        {
            for (int i = 0; i < cultureInfos.Length; i++)
            {
                if (cultureInfos[i] == Thread.CurrentThread.CurrentUICulture)
                {
                    return i;
                }
            }
            return 0;
        }

		void OnFontChanged()
		{
			if (handleChange)
			{
				return;
			}
			var currentIndex = (int)fontsCombobox.SelectedIndex;
			if (currentIndex >= -1)
			{
				var selected = fonts[currentIndex].ToString();
				var fontSize = fontSizeTextView.IntValue;
				IFont font = inspectDelegate.GetFromName(selected, fontSize);
				FontChanged?.Invoke(this, new FontData(font, fontSize));
			}
		}

		void ToolkitButton_Activated (object sender, EventArgs e)
		{
			InspectorViewModeChanged?.Invoke (this, toolkitButton.State == NSCellStateValue.On ? InspectorViewMode.Xwt : InspectorViewMode.Native);
		}

		void LanguagesComboBox_SelectionChanged(object sender, EventArgs e)
		{
			var currentIndex = (int)languagesComboBox.SelectedIndex;
			if (currentIndex > -1)
			{
				var selected = cultureInfos[currentIndex];
				CultureChanged?.Invoke(this, selected);
			}
		}

		void ThemeButton_Activated (object sender, EventArgs e)
		{
			if (sender is ToggleButton btn) {
				ThemeChanged?.Invoke (this, btn.IsToggled);
			}
		}

		#region Color Panel

		void ColorButton_Activated(object sender, EventArgs e)
		{
			var button = selectedColorButton = (NSColorWell)sender;
			var panelButton = NSColorPanel.SharedColorPanel;
			panelButton.Color = button.Color;

			NSNotificationCenter.DefaultCenter.AddObserver(this, new ObjCRuntime.Selector(ColorPopoverDidCloseSelectorName), NSPopover.DidCloseNotification, panelButton);
			NSNotificationCenter.DefaultCenter.AddObserver(this, new ObjCRuntime.Selector(ColorSelectorName), NSColorPanel.ColorChangedNotification, panelButton);

			panelButton.MakeKeyAndOrderFront(panelButton);
		}

		[Export(ColorPopoverDidCloseSelectorName)]
		void OnWindowColorDidClose(NSObject target)
		{
			NSNotificationCenter.DefaultCenter.RemoveObserver(this, NSPopover.DidCloseNotification, NSColorPanel.SharedColorPanel);
			NSNotificationCenter.DefaultCenter.RemoveObserver(this, NSColorPanel.ColorChangedNotification, NSColorPanel.SharedColorPanel);

			selectedColorButton = null;
		}

		[Export(ColorSelectorName)]
		void OnColorDidChange(NSObject target)
		{
			var selectedColorButton = this.selectedColorButton;
			if (selectedColorButton == null)
			{
				return;
			}
			if (target is NSNotification not && not.Object is NSColorPanel colorPanel)
			{
				var color = colorPanel.Color;
				selectedColorButton.Color = color;
				ViewBackgroundColorChanged?.Invoke(this, color.ToColor());
			}
		}

		#endregion

		public void ChangeView(InspectorManager manager, INativeObject nativeObject)
		{
			handleChange = true;

			//close color panel if visible
			var panelButton = NSColorPanel.SharedColorPanel;
			if (panelButton.IsVisible)
				panelButton.Close();

			bool showImage = false;
			bool showFont = false;
			//NSPopUpButton
			bool showLayer = false;

			NSColor backgroundColor = null;

			if (nativeObject is IView viewWrapper)
			{
				var fontData = manager.Delegate.GetFont(viewWrapper);
				if (fontData?.Font != null)
				{
					var currentFontName = ((NSFont)fontData.Font.NativeObject).FontName;
					if (currentFontName == ".AppleSystemUIFont")
					{
						currentFontName = "HelveticaNeue";
					}
					var name = fonts.FirstOrDefault(s => s.ToString() == currentFontName);
					if (name == null)
					{
						name = fonts.FirstOrDefault(s => s.ToString() == "HelveticaNeue");
					}

					fontsCombobox.Select(name);

					fontSizeTextView.IntValue = (int)fontData.Size;
					showFont = true;
				}

				if (viewWrapper.NativeObject is NSImageView || viewWrapper.NativeObject is NSButton)
				{
					showImage = true;
				}

				showLayer = true;
				if (viewWrapper.NativeObject is NSView vi && vi.Layer?.BackgroundColor != null)
				{
					backgroundColor = NSColor.FromCGColor(vi.Layer.BackgroundColor);
				}
			}

			backgroundColorButton.Color = backgroundColor ?? NSColor.White;

			imageButtonVisible = showImage;
			fontButtonsVisible = showFont;
			backgroundColorVisible = showLayer;

			removeButtonVisible = nativeObject != null;

			RegenerateButtons();

			handleChange = false;
		}
	}
}
