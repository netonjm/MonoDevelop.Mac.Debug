// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using AppKit;
using VisualStudio.ViewInspector.Abstractions;

namespace VisualStudio.ViewInspector.Mac.Windows
{
    class BorderedWindow : BaseWindow, IBorderedWindow
	{
		readonly NSBox box;
		IView ObjContent { get; set; }

		public NSColor BorderColor {
			get => box.BorderColor;
			set => box.BorderColor = value;
		}

		public NSColor FillColor {
			get => box.FillColor;
			set {
				BackgroundColor = value;
				box.FillColor = value;
			}
		}

		public float BorderWidth {
			get => (float)box.BorderWidth;
			set => box.BorderWidth = value;
		}

		public NSBorderType BorderType {
			get => box.BorderType;
			set => box.BorderType = value;
		}

		public bool Visible { 
			get => !box.Transparent;
			set {
				box.Transparent = !value;
			}
		}

		public string ContentViewIdentifier => ObjContent?.Identifier ?? "";

		public BorderedWindow (IntPtr handle) : base (handle)
		{

		}

		public BorderedWindow(IView content, NSColor borderColor, NSBorderType borderType = NSBorderType.LineBorder, float borderWidth = 3) : this((CGRect) content.Frame.NativeObject, borderColor, NSColor.Clear, borderType, borderWidth)
		{
			ObjContent = content;
		}

		public BorderedWindow (CGRect frame, NSColor borderColor, NSBorderType borderType = NSBorderType.LineBorder, float borderWidth = 3) : this (frame, borderColor, NSColor.Clear, borderType, borderWidth)
		{

		}

		public BorderedWindow (CGRect frame, NSColor borderColor, NSColor fillColor, NSBorderType borderType = NSBorderType.LineBorder, float borderWidth = 3) : base (frame, NSWindowStyle.Borderless, NSBackingStore.Buffered, false)
		{
			IsOpaque = false;
			ShowsToolbarButton = false;
			IgnoresMouseEvents = true;
			box = new NSBox { BoxType = NSBoxType.NSBoxCustom };
			ContentView = box;
			FillColor = fillColor;
			BorderWidth = borderWidth;
			BorderColor = borderColor;
			BorderType = borderType;
			Level = NSWindowLevel.Floating;
			Visible = false;
		}

		public void SetParentWindow(IWindow selectedWindow)
		{
			this.ParentWindow = selectedWindow.NativeObject as NSWindow;
		}

		public void AlignWith (IView view)
		{
			var frame = (CGRect) view.AccessibilityFrame.NativeObject;
			SetFrame(frame, true);
		}

		public void AlignWindowWithContentView ()
		{
			if (ObjContent != null) {
				AlignWith(ObjContent);
			}
		}

		public void OrderFront()
		{
			base.OrderFront(null);
		}
	}
}
