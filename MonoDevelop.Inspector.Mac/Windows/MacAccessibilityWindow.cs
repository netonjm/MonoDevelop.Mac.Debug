// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Text;
using AppKit;
using CoreGraphics;
using MonoDevelop.Inspector.Services;

namespace MonoDevelop.Inspector.Mac
{
	class MacAccessibilityWindow : MacWindowWrapper, IAccessibilityWindow
	{
		const int margin = 10;
		readonly NSStackView container;

		public event EventHandler<IViewWrapper> RaiseAccessibilityIssueSelected;
		public event EventHandler AuditRequested;
		public event EventHandler ShowErrorsRequested;

		public MacAccessibilityWindow (CGRect frame) : base(frame, NSWindowStyle.Titled | NSWindowStyle.Resizable, NSBackingStore.Buffered, false)
		{
			ShowsToolbarButton = false;
			MovableByWindowBackground = false;

			container = NativeViewHelper.CreateVerticalStackView(margin);
			container.TranslatesAutoresizingMaskIntoConstraints = false;
			ContentView.AddSubview (container);
			container.TopAnchor.ConstraintEqualTo(ContentView.TopAnchor).Active = true;
			container.LeftAnchor.ConstraintEqualTo(ContentView.LeftAnchor).Active = true;
			container.RightAnchor.ConstraintEqualTo(ContentView.RightAnchor).Active = true;
			container.BottomAnchor.ConstraintEqualTo(ContentView.BottomAnchor).Active = true;

			outlineAccessibilityView = new OutlineView();
		
			var outlineViewScrollView = new ScrollContainerView(outlineAccessibilityView);
			outlineViewScrollView.TranslatesAutoresizingMaskIntoConstraints = false;
			container.AddArrangedSubview(outlineViewScrollView);

			outlineAccessibilityView.SelectionNodeChanged += (s, e) => {
				if (outlineAccessibilityView.SelectedNode is NodeIssue nodeView) {
					RaiseAccessibilityIssueSelected?.Invoke (this, nodeView.DetectedError?.View);
				}
			};

			outlineAccessibilityView.DoubleClick += (s,e) => {
				outlineAccessibilityView.ExpandItem (outlineAccessibilityView.SelectedNode, true);
			};

			outlineAccessibilityView.OutlineTableColumn.Title = "Issues";

			var service = AccessibilityService.Current;
			service.ScanFinished += (s, window) => {
				var nodeBase = new NodeIssue("Issues");
				foreach (var error in service.DetectedErrors) {
					nodeBase.AddChild(new NodeIssue(error));
				}
				outlineAccessibilityView.SetData(nodeBase);
			};

            var buttonContainer = NativeViewHelper.CreateHorizontalStackView ();
			buttonContainer.TranslatesAutoresizingMaskIntoConstraints = false;
			buttonContainer.Alignment = NSLayoutAttribute.CenterY;
			buttonContainer.Distribution = NSStackViewDistribution.Fill;
			container.AddArrangedSubview (buttonContainer);
		
			var runAuditButton = NativeViewHelper.CreateButton ("Run Audit");
			buttonContainer.AddArrangedSubview (runAuditButton);
			runAuditButton.Activated += (sender, e) => AuditRequested?.Invoke (this, EventArgs.Empty);

            runAuditButton.WidthAnchor.ConstraintEqualTo(150).Active = true;
            runAuditButton.HeightAnchor.ConstraintEqualTo(40).Active = true;

            var showHideErrorsButton = NativeViewHelper.CreateButton ("Show/Hide Errors");
			buttonContainer.AddArrangedSubview (showHideErrorsButton);

			container.AddArrangedSubview (new NSView () { TranslatesAutoresizingMaskIntoConstraints = false });
			showHideErrorsButton.Activated += (sender, e) => ShowErrorsRequested?.Invoke (this, EventArgs.Empty);
			showHideErrorsButton.WidthAnchor.ConstraintEqualTo(150).Active = true;
            showHideErrorsButton.HeightAnchor.ConstraintEqualTo(40).Active = true;

            errorLabel = NativeViewHelper.CreateLabel ("");
			buttonContainer.AddArrangedSubview (errorLabel);

			var accessibilityService = AccessibilityService.Current;
			accessibilityService.ScanFinished += (s, e) => {
				errorLabel.StringValue = string.Format ("{0} errors found.", accessibilityService.IssuesFound);
			};

			buttonContainer.HeightAnchor.ConstraintEqualTo(40).Active = true;
		}

		readonly OutlineView outlineAccessibilityView;

		public string IssuesLabel
		{
			get => errorLabel.StringValue;
			set => errorLabel.StringValue = value;
		}

		readonly NSTextField errorLabel;
	}

	class NodeIssue : Node
	{
		public DetectedError DetectedError { get; }

		static string GetName(DetectedError error)
		{
			var title = error.GetTitleMessage();
			var name = string.Format("{0} ({1}) : {2}", error.View.NativeObject.GetType(), error.View.Identifier ?? "N.I", title);
			return name;
		}

		public NodeIssue(DetectedError detectedError) : base(GetName (detectedError))
		{
			this.DetectedError = detectedError;

			List<string> children = new List<string>();
			var type = detectedError.View.NativeObject.GetType().ToString();
			if (detectedError.ErrorType.HasFlag(DetectedErrorType.AccessibilityHelp))
			{
				children.Add($"This {type} needs set the AccessibilityHelp field");
			}
			if (detectedError.ErrorType.HasFlag(DetectedErrorType.AccessibilityTitle))
			{
				children.Add($"This {type} needs set the AccessibilityTitle field");
			}
			if (detectedError.ErrorType.HasFlag(DetectedErrorType.AccessibilityParent))
			{
				children.Add($"This {type} needs set the AccessibilityParent field");
			}

			if (detectedError.ErrorType.HasFlag(DetectedErrorType.Contrast))
			{
				children.Add(string.Format("The text constrast ratio is {0}. This is based in color {1} compared with color {2}", detectedError.ContrastRatio, detectedError.Color1, detectedError.Color2));
			}

			foreach (var item in children)
			{
				AddChild(new NodeIssue(item));
			}
		}

		public NodeIssue(string view) : base(view)
		{
		}
	}
}
