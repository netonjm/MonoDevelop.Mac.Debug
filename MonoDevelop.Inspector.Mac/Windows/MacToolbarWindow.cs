// This file has been autogenerated from a class added in the UI designer.

using System;
using AppKit;
using System.Linq;
using Foundation;
using CoreGraphics;
using System.Globalization;
using System.Threading;

namespace MonoDevelop.Inspector.Mac
{
	class MacToolbarWindow : MacWindowWrapper, IToolbarWindow
	{
		public event EventHandler<bool> KeyViewLoop;
		public event EventHandler<bool> NextKeyViewLoop;
		public event EventHandler<bool> PreviousKeyViewLoop;
		public event EventHandler<bool> ThemeChanged;

        public event EventHandler ItemDeleted;
		public event EventHandler ItemImageChanged;
		public event EventHandler<FontData> FontChanged;
        public event EventHandler<CultureInfo> CultureChanged;

        public event EventHandler<InspectorViewMode> InspectorViewModeChanged;

        const int MenuItemSeparation = 3;
		const int LeftPadding = 5;

		readonly NSStackView stackView;
        readonly NSStackView secondStackView;
        readonly IInspectDelegate inspectDelegate;

        readonly ToggleButton toolkitButton;

        NSView rescanSeparator;
      
        public void ShowToolkit (bool value)
        {
            if (!value) {
                toolkitButton.RemoveFromSuperview();
                rescanSeparator.RemoveFromSuperview();
            } else {
                if (!stackView.Subviews.Contains (toolkitButton)){
                    stackView.AddArrangedSubview(toolkitButton);
                    stackView.AddArrangedSubview(rescanSeparator);
                } 
            } 
        }

		public MacToolbarWindow (IInspectDelegate inspectDelegate, CGRect frame) : base(frame, NSWindowStyle.Titled | NSWindowStyle.FullSizeContentView, NSBackingStore.Buffered, false)
        {
            this.inspectDelegate = inspectDelegate;
			//BackgroundColor = NSColor.Clear;
			IsOpaque = false;
			TitlebarAppearsTransparent = true;
			TitleVisibility = NSWindowTitleVisibility.Hidden;
			ShowsToolbarButton = false;
			MovableByWindowBackground = false;

            NSStackView verticalStackView;
            ContentView = verticalStackView = NativeViewHelper.CreateVerticalStackView (MenuItemSeparation);

            stackView = NativeViewHelper.CreateHorizontalStackView (MenuItemSeparation);
            verticalStackView.AddArrangedSubview (stackView);

            stackView.LeftAnchor.ConstraintEqualTo(verticalStackView.LeftAnchor, 10).Active = true;
            stackView.RightAnchor.ConstraintEqualTo(verticalStackView.RightAnchor, 10).Active = true;

            secondStackView = NativeViewHelper.CreateHorizontalStackView(MenuItemSeparation);
            verticalStackView.AddArrangedSubview(secondStackView);

            secondStackView.LeftAnchor.ConstraintEqualTo(verticalStackView.LeftAnchor, 10).Active = true;
            secondStackView.RightAnchor.ConstraintEqualTo(verticalStackView.RightAnchor, 10).Active = true;

            //Visual issues view
            var actualImage = (NSImage)inspectDelegate.GetImageResource("overlay-actual.png").NativeObject;
            var keyViewLoopButton = new ToggleButton() { Image = actualImage };
			keyViewLoopButton.ToolTip = "Shows current focused item";
			AddButton (keyViewLoopButton);
			keyViewLoopButton.Activated += (s, e) => {
				KeyViewLoop?.Invoke(this, keyViewLoopButton.IsToggled);
			};

            var previousImage = (NSImage)inspectDelegate.GetImageResource("overlay-previous.png").NativeObject;
            var prevKeyViewLoopButton = new ToggleButton() { Image = previousImage }; 
			prevKeyViewLoopButton.ToolTip = "Shows previous view item";
			AddButton (prevKeyViewLoopButton);
			prevKeyViewLoopButton.Activated += (s, e) => {
				PreviousKeyViewLoop?.Invoke(this, prevKeyViewLoopButton.IsToggled);
			};

            var nextImage = (NSImage)inspectDelegate.GetImageResource("overlay-next.png").NativeObject;
            var nextKeyViewLoopButton = new ToggleButton() { Image = nextImage };
			nextKeyViewLoopButton.ToolTip = "Shows next view item";
			AddButton (nextKeyViewLoopButton);
			nextKeyViewLoopButton.Activated += (s, e) => {
				NextKeyViewLoop?.Invoke(this, nextKeyViewLoopButton.IsToggled);
			};

			AddSeparator ();

            var rescanImage = (NSImage)inspectDelegate.GetImageResource("rescan-16.png").NativeObject;
            toolkitButton = new ToggleButton { Image = rescanImage };
			toolkitButton.ToolTip = "Change beetween Toolkits";
			AddButton (toolkitButton);
			toolkitButton.Activated += ToolkitButton_Activated;;

            rescanSeparator = AddSeparator ();

            var themeImage = (NSImage)inspectDelegate.GetImageResource("style-16.png").NativeObject;
            var themeButton = new ToggleButton { Image = themeImage }; 
			themeButton.ToolTip = "Change Style Theme";
			AddButton (themeButton);
			themeButton.Activated += ThemeButton_Activated;

			AddSeparator ();

            var deleteImage = (NSImage)inspectDelegate.GetImageResource("delete-16.png").NativeObject;
            deleteButton = new ImageButton();
			deleteButton.Image = deleteImage;
			deleteButton.ToolTip = "Delete selected item";
			AddButton (deleteButton);
			deleteButton.Activated += (s,e) =>
			{
				ItemDeleted?.Invoke(this, EventArgs.Empty);
			};

            var changeImg = (NSImage)inspectDelegate.GetImageResource("image-16.png").NativeObject;
			changeImage = new ImageButton();
			changeImage.Image = changeImg;
			changeImage.ToolTip = "Change image from selected item";
			AddButton (changeImage);

			changeImage.Activated += (s, e) =>
			{
				ItemImageChanged?.Invoke(this, EventArgs.Empty);
			};

            AddSeparator();

            languagesComboBox = new NSComboBox() { TranslatesAutoresizingMaskIntoConstraints = false };
            languagesComboBox.ToolTip = "Change font from selected item";
       
            cultureInfos = CultureInfo.GetCultures(CultureTypes.AllCultures);
            var culturesStr = new NSString[cultureInfos.Length];

            NSString selected = null;
            for (int i = 0; i < cultureInfos.Length; i++)
            {
                culturesStr[i] = new NSString(cultureInfos[i].DisplayName);
                if (i == 0 || cultureInfos[i] == Thread.CurrentThread.CurrentUICulture)
                {
                    selected = culturesStr[i];
                }
            }

            languagesComboBox.Add(culturesStr);
            stackView.AddArrangedSubview(languagesComboBox);

            languagesComboBox.Select(selected);

            languagesComboBox.Activated += LanguagesComboBox_SelectionChanged;
            languagesComboBox.SelectionChanged  += LanguagesComboBox_SelectionChanged;
            languagesComboBox.WidthAnchor.ConstraintEqualTo(220).Active = true;

            //FONTS 

            fontsCombobox = new NSComboBox() { TranslatesAutoresizingMaskIntoConstraints = false };
			fontsCombobox.ToolTip = "Change font from selected item";
			fonts = NSFontManager.SharedFontManager.AvailableFonts
				.Select (s => new NSString(s))
				.ToArray ();

			fontsCombobox.Add(fonts);
            fontsCombobox.WidthAnchor.ConstraintGreaterThanOrEqualTo(220).Active = true;
		
			fontSizeTextView = new NSTextField() { TranslatesAutoresizingMaskIntoConstraints = false };
			fontSizeTextView.ToolTip = "Change font size from selected item";
            fontSizeTextView.WidthAnchor.ConstraintEqualTo(40).Active = true;

			fontsCombobox.SelectionChanged += (s, e) => {
				OnFontChanged();
			};

			fontSizeTextView.Activated += (s, e) => {
				OnFontChanged();
			};

            endSpace = new NSView() { TranslatesAutoresizingMaskIntoConstraints = false };

            //stackView.AddArrangedSubview(new NSView() { TranslatesAutoresizingMaskIntoConstraints = false });
        }

        NSView endSpace;

        int GetSelectedLanguage ()
        {
            for (int i = 0; i < cultureInfos.Length; i++)
            {
                if (cultureInfos[i] == Thread.CurrentThread.CurrentUICulture)
                {
                    return i;
                }
            }
            return 0;
        }

        CultureInfo[] cultureInfos;
        NSComboBox languagesComboBox;
        void LanguagesComboBox_SelectionChanged(object sender, EventArgs e)
        {
            var currentIndex = (int)languagesComboBox.SelectedIndex;
            if (currentIndex > -1)
            {
                var selected = cultureInfos[currentIndex];
                CultureChanged?.Invoke(this, selected);
            }
        }

		bool handleChange;

        public void ChangeView (InspectorManager manager, IViewWrapper viewWrapper)
        {
			handleChange = true;

			bool showImage = false;
            bool showFont = false;
            //NSPopUpButton
            var fontData = manager.Delegate.GetFont(viewWrapper);
            if (fontData?.Font != null)
            {
                var currentFontName = ((NSFont)fontData.Font.NativeObject).FontName;
                if (currentFontName == ".AppleSystemUIFont")
                {
                    currentFontName = "HelveticaNeue";
                }
                var name = fonts.FirstOrDefault(s => s.ToString() == currentFontName);
                fontsCombobox.Select(name);

                fontSizeTextView.IntValue = (int)fontData.Size;
                showFont = true;
            }

            if (viewWrapper.NativeObject is NSImageView || viewWrapper.NativeObject is NSButton)
            {
                showImage = true;
            }

            imageButtonVisible = showImage;
            fontButtonsVisible = showFont;

			handleChange = false;

		}

        void ToolkitButton_Activated (object sender, EventArgs e)
		{
			InspectorViewModeChanged?.Invoke (this, toolkitButton.State == NSCellStateValue.On ? InspectorViewMode.Xwt : InspectorViewMode.Native);
		}

		bool fontButtonsVisible
		{
			get => stackView.Subviews.Contains(fontsCombobox);
			set
			{
				if (fontButtonsVisible == value)
				{
					return;
				}

				if (value)
				{
					secondStackView.AddArrangedSubview(fontsCombobox);
                    secondStackView.AddArrangedSubview(fontSizeTextView);
                    secondStackView.AddArrangedSubview(endSpace);
				}
				else
				{
					fontSizeTextView.RemoveFromSuperview();
					fontsCombobox.RemoveFromSuperview();
                    endSpace.RemoveFromSuperview();
                }
			}
		}

		bool imageButtonVisible
		{
			get => stackView.Subviews.Contains(changeImage);
			set
			{
				if (imageButtonVisible == value)
				{
					return;
				}

				if (value)
				{
					stackView.AddArrangedSubview(changeImage);
				}
				else
				{
					changeImage.RemoveFromSuperview();
				}
			}
		}

		void OnFontChanged ()
		{
			if (handleChange) {
				return;
			}
			var currentIndex = (int)fontsCombobox.SelectedIndex;
			if (currentIndex >= -1)
			{
				var selected = fonts[currentIndex].ToString();
				var fontSize = fontSizeTextView.IntValue;
                IFontWrapper font = inspectDelegate.GetFromName(selected, fontSize);
                FontChanged?.Invoke(this, new FontData (font, fontSize));
			}
		}

		NSString[] fonts;
		NSComboBox fontsCombobox;
		NSTextField fontSizeTextView;
		//public override bool CanBecomeKeyWindow => false;
		//public override bool CanBecomeMainWindow => false;

		ImageButton deleteButton, changeImage;

		public bool ImageChangedEnabled
		{
			get => changeImage.Enabled;
			set => changeImage.Enabled = value;
		}

		void ThemeButton_Activated (object sender, EventArgs e)
		{
			if (sender is ToggleButton btn) {
				ThemeChanged?.Invoke (this, btn.IsToggled);
			}
		}

        NSView AddSeparator ()
        {
            var separator = new VerticalSeparator();
            stackView.AddArrangedSubview(separator);
            return separator;
        }  

		void AddButton (NSButton view)
		{
			stackView.AddArrangedSubview (view);
			view.WidthAnchor.ConstraintEqualTo(InspectorWindow.ButtonWidth).Active = true;
		}
	}
}
