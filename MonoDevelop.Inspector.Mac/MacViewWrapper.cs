// This file has been autogenerated from a class added in the UI designer.

using System.Collections.Generic;
using System.Text;
using AppKit;
using CoreGraphics;
using System.Linq;

namespace MonoDevelop.Inspector.Mac
{
    public class MacRectangle : IRectangle
    {
        CGRect rect;
        public MacRectangle(CGRect rect)
        {
            this.rect = rect;
        }

        public object NativeObject => rect;
    }

    public class MacFont : IFontWrapper
    {
        NSFont rect;
        public MacFont(NSFont rect)
        {
            this.rect = rect;
        }

        public object NativeObject => rect;
    }

    class MacConstraintWrapper : IConstrainWrapper
    {
        NSLayoutConstraint item;
        public MacConstraintWrapper(NSLayoutConstraint item)
        {
            this.item = item;
        }

        public object NativeObject => item;

        string GetNodeName ()
        {
            StringBuilder builder = new StringBuilder();

            if (item.FirstItem != null) {
                builder.Append(string.Format("First [{0}, {1}]", item.FirstAttribute.ToString(), item.FirstItem.GetType ().Name));
            }

            builder.Append($" {item.Relation}");

            if (item.SecondItem != null) {
                builder.Append(string.Format(" Second [{0}, {1}]", item.SecondAttribute.ToString(), item.SecondItem.GetType().Name));
            }

            builder.Append($" Mult:{item.Multiplier} Cons:{item.Constant} Prior: {item.Priority}");
            return builder.ToString();
        }

        public void RemoveFromSuperview()
        {
            if (item.FirstItem is NSView firstItem) {
                if (firstItem.Constraints.Contains (item)) {
                    firstItem.RemoveConstraint(item);
                    return;
                }
            }
            if (item.SecondItem is NSView secondItem)
            {
                if (secondItem.Constraints.Contains(item))
                {
                    secondItem.RemoveConstraint(item);
                    return;
                }
            }
        }

        public string NodeName { get => GetNodeName(); }
        public string Identifier { get => item.Active ? "active" : "inactive"; }

        public IViewWrapper PreviousValidKeyView {
            get => new MacViewWrapper (item.FirstItem as NSView ?? item.SecondItem as NSView);
        }
    }

    public class MacViewWrapper : IViewWrapper
	{
		public bool Hidden => widget.Hidden;

		public string Identifier => widget.Identifier;

		public IRectangle AccessibilityFrame => new MacRectangle (widget.AccessibilityFrame);

		public List<IViewWrapper> Subviews {
			get {
				List<IViewWrapper> tmp = new List<IViewWrapper> ();
				foreach (var w in widget.Subviews) {
					tmp.Add (new MacViewWrapper (w));
				}
				return tmp;
			}
		}

		public IViewWrapper NextValidKeyView {
			get {
				if (widget.NextValidKeyView != null)
					return new MacViewWrapper (widget.NextValidKeyView);
				return null;
			}
		}

		public IViewWrapper PreviousValidKeyView {
			get {
				if (widget.PreviousValidKeyView != null)
					return new MacViewWrapper (widget.PreviousValidKeyView);
				return null;
			}
		}

		public IRectangle Frame =>new MacRectangle (widget.Frame);

		public IViewWrapper Superview {
			get {
				if (widget.Superview != null)
					return new MacViewWrapper (widget.Superview);
				return null;
			}
		}

		public string AccessibilityTitle {
			get => widget.AccessibilityTitle;
			set => widget.AccessibilityTitle = value;
		}

		public string AccessibilityHelp {
			get => widget.AccessibilityHelp;
			set => widget.AccessibilityHelp = value;
		}

		public object AccessibilityParent {
			get {
				return widget.AccessibilityParent;
			}
			set => widget.AccessibilityParent = value as NSView;
		}

		public bool CanBecomeKeyView {
			get => widget.CanBecomeKeyView;
		}

		public object NativeObject => widget;
		public object View => widget;
		public string NodeName => widget.GetType ().Name;

        public bool HasConstraints => widget.Constraints.Length > 0;

        public List<IConstrainWrapper> Constraints { 
            get {
                var result = new List<IConstrainWrapper>();
                foreach (var item in widget.Constraints)
                {
                    var cons = new MacConstraintWrapper(item);
                    result.Add(cons);
                }
                return result;
            }
        }

        public void RemoveFromSuperview ()
		{
			widget.RemoveFromSuperview ();
		}

        public void Focus()
        {
           widget.Window?.MakeFirstResponder(widget);
        }

        internal NSView widget;
		public MacViewWrapper (NSView widget)
		{
			this.widget = widget;
		}
	}
}
