// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using AppKit;
using CoreGraphics;
using Foundation;
using MonoDevelop.Inspector.Mac.Services;
using MonoDevelop.Inspector.Mac.TouchBar;
using ObjCRuntime;

namespace MonoDevelop.Inspector.Mac.HostWindow
{
    [Register("DebugWindow")]
	public class InspectorHostWindow : BaseWindow, IMainWindow, INSTouchBarDelegate
    {
        NSTouchBar touchbar;
        ToolbarService service;
        InspectorContext context;

        public InspectorViewMode ViewMode { get; set; } = InspectorViewMode.Native;

        public InspectorHostWindow(NativeHandle handle) : base(handle)
        {
        }

        public InspectorHostWindow(NSCoder coder) : base(coder)
        {
        }

        public InspectorHostWindow() : base()
        {
            Initialize();
        }

        void Initialize()
		{
            NSApplication.SharedApplication.SetAutomaticCustomizeTouchBarMenuItemEnabled(true);
            touchbar = new NSTouchBar();
            service = ToolbarService.Current;
            context = InspectorContext.Current;

            if (context.Manager == null)
            {
                var inspectorDelegate = new MacInspectorDelegate();
                inspectorDelegate.InitializeManager(context, service);
            }

            context.FocusedViewChanged += Context_FocusedViewChanged;
        }

        void Context_FocusedViewChanged(object sender, IView e)
        {
            if (e.NativeObject is NSView view)
            {
                RefreshBar(view);
            }
        }

        protected override void Dispose(bool disposing)
        {
            context.FocusedViewChanged -= Context_FocusedViewChanged;
            base.Dispose(disposing);
        }

        [Export ("makeTouchBar")]
        public NSTouchBar MakeTouchBar ()
        {
            return touchbar;
        }

        void RefreshBar (NSView view)
        {
            var touchBarDelegate = service.GetTouchBarDelegate(view);
            if (touchBarDelegate != null)
            {
                touchBarDelegate.SetCurrentView(view);
                touchbar.Delegate = touchBarDelegate;
                touchbar.DefaultItemIdentifiers = touchBarDelegate.Identifiers;
                view.SetTouchBar(touchbar);
            }
        }

        public override void BecomeKeyWindow()
        {
            context.Attach(this);
            base.BecomeKeyWindow();
        }

        public override bool MakeFirstResponder (NSResponder aResponder)
		{
			if (aResponder is NSView view) {
                context.ChangeFocusedView (new TreeViewItemView (view));
                RefreshBar(view);
            }
            return base.MakeFirstResponder (aResponder);
		}
    }
}
