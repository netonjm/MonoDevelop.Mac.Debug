// This file has been autogenerated from a class added in the UI designer.

using AppKit;
using Foundation;
using ObjCRuntime;
using System;
using System.Collections.Generic;

namespace MonoDevelop.Inspector.Mac
{
	public class TableViewRowSelectionSource : NSTableViewSource
	{
		protected bool IsRowValid (nint row) => data != null && row >= 0 && row < data.Count;

		public event EventHandler SelectionChanged;

		readonly List<TableViewItem> data;

		public TableViewRowSelectionSource(List<TableViewItem> data)
		{
			this.data = data;
		}

		#region NSTableViewSource overrides

		public override NSView GetViewForItem (NSTableView tableView, NSTableColumn tableColumn, nint row)
		{
			var result = new NSStackView()
			{
				Orientation = NSUserInterfaceLayoutOrientation.Horizontal,
				Alignment = NSLayoutAttribute.CenterY,
				Spacing = 10,
				Distribution = NSStackViewDistribution.Fill,
				TranslatesAutoresizingMaskIntoConstraints = false
			};

			var item = data[(int)row];
			result.AddArrangedSubview (NativeViewHelper.CreateLabel(item.Name));
			result.AddArrangedSubview (new NSView() { TranslatesAutoresizingMaskIntoConstraints = false });
			return result;
		}

		//public override void SelectionIsChanging(NSNotification notification)
		//{
		//	var tableView = notification.Object as NSTableView;

		//	if (IsRowValid(previousRowSelected))
		//	{
		//		RowSelectionStateChanged?.Invoke(this, previousRowSelected, false);
		//	}
		//	if (previousRowSelected != (int)tableView.SelectedRow && IsRowValid(tableView.SelectedRow))
		//	{
		//		RowSelectionStateChanged?.Invoke(this, (int)tableView.SelectedRow, true);
		//	}
		//}

		public override void SelectionDidChange (NSNotification notification)
		{
			if (notification.Object is NSTableView tableView && IsRowValid(tableView.SelectedRow))
			{
				SelectionChanged?.Invoke(this, EventArgs.Empty);
			};
		}

		public override nint GetRowCount (NSTableView tableView) => data?.Count ?? 0;

		#endregion
	}

	public class TableViewItem
	{
		public TableViewItem(string name)
		{
			Name = name;
		}

		public string Name { get; private set; }
	}

	public class ScrollContainerView : NSScrollView
	{
		public ScrollContainerView (NSView content)
		{
			ContentInsets = new NSEdgeInsets(0, 0, 0, 0);
			HasVerticalScroller = true;
			HasHorizontalScroller = false;
			DocumentView = content;
		}
	}

	public class TableView : NSTableView
	{
		public event EventHandler SelectionChanged;
		List<TableViewItem> data = new List<TableViewItem> ();

		public TableViewItem SelectedItem
		{
			get {
				if (SelectedRow < 0 || SelectedRow >= data.Count)
				{
					return null;
				}
				return data[(int)SelectedRow];
			} 
		}

		public override void AwakeFromNib()
		{
			base.AwakeFromNib();
		}


		public override void TakeDoubleValueFrom(NSObject sender)
		{
			base.TakeDoubleValueFrom(sender);
		}

		public TableView ()
		{
			AllowsColumnSelection = true;
			AllowsExpansionToolTips = true;
			AllowsMultipleSelection = false;
			ColumnAutoresizingStyle = NSTableViewColumnAutoresizingStyle.Uniform;
			AutosaveTableColumns = false;
			FocusRingType = NSFocusRingType.None;
			GridStyleMask = NSTableViewGridStyle.SolidVerticalLine | NSTableViewGridStyle.DashedHorizontalGridLine;
			RowSizeStyle = NSTableViewRowSizeStyle.Custom;
			RowHeight = 17;

			source = new TableViewRowSelectionSource(data);
			Source = source;
			source.SelectionChanged += Source_SelectionChanged;
		}

		TableViewRowSelectionSource source;

		public void SetData (List<TableViewItem> data)
		{
			this.data.Clear();
			this.data.AddRange(data);
			ReloadData();
		}

		void Source_SelectionChanged (object sender, EventArgs e)
		{
			SelectionChanged?.Invoke(this, EventArgs.Empty);
		}

		protected override void Dispose (bool disposing)
		{
			source.SelectionChanged -= Source_SelectionChanged;
			base.Dispose(disposing);
		}
	}
}
