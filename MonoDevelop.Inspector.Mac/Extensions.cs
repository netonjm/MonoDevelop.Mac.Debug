// This file has been autogenerated from a class added in the UI designer.

using System.Collections.Generic;
using System.Reflection;
using CoreGraphics;
using MonoDevelop.Inspector;
using MonoDevelop.Inspector.Mac;

namespace AppKit
{
	public static class Extensions
	{
		public static bool IsBlockedType (this IView customView)
		{
			if (customView is NSTableViewCell)
			{
				return true;
			}
			return false;
		}

		public static PropertyInfo GetProperty(this object obj, string propertyName)
		{
			return obj.GetType().GetProperty(propertyName);
		}

		internal static TreeNodeView Search (this TreeNodeView nodeView, IView view)
		{
			if (nodeView.Wrapper != null && nodeView.Wrapper.NativeObject == view.NativeObject) {
				return nodeView;
			}

			if (nodeView.ChildCount == 0) {
				return null;
			}

			for (int i = 0; i < nodeView.ChildCount; i++) {
				var node = (TreeNodeView) nodeView.GetChild (i);
				var found = Search (node, view);
				if (found != null) {
					return found;
				}
			}
			return null;
		}
		public static void AlignRight (this NSWindow sender, NSWindow toView, int pixels)
		{
			var frame = sender.Frame;
			frame.Location = new CGPoint(toView.Frame.Right + pixels, toView.Frame.Bottom - frame.Height);
			sender.SetFrame(frame, true);
		}

		public static void AlignLeft (this NSWindow sender, NSWindow toView, int pixels)
		{
			var frame = sender.Frame;
			frame.Location = new CGPoint(toView.Frame.Left - sender.Frame.Width - pixels, toView.Frame.Bottom - frame.Height);
			sender.SetFrame(frame, true);
		}

		public static void AlignTop (this NSWindow from, NSWindow toView, int pixels)
		{
			var frame = from.Frame;
			frame.Location = new CGPoint(toView.Frame.Left, toView.AccessibilityFrame.Y + toView.Frame.Height + pixels);
			from.SetFrame(frame, true);
		}

		public static CGRect Add (this CGRect sender, CGRect toAdd)
		{
			return new CGRect (sender.X + toAdd.X, sender.Y + toAdd.Y, sender.Width + toAdd.Width, sender.Height + toAdd.Height);
		}

		public static CGRect Add (this CGRect sender, CGPoint toAdd)
		{
			return new CGRect (sender.X + toAdd.X, sender.Y + toAdd.Y, sender.Width, sender.Height);
		}

		public static CGRect Add (this CGRect sender, CGSize toAdd)
		{
			return new CGRect (sender.X, sender.Y, sender.Width + toAdd.Width, sender.Height + toAdd.Height);
		}
	}
}
